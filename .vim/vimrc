let $VIMHOME = expand('<sfile>:p:h')
function! s:mkdir(...) abort
    if isdirectory(a:1)
        return
    endif
    return call('mkdir', a:000)
endfunction

set nrformats= "すべての数を10進数として扱う
set nrformats+=unsigned " 数字の増加減少でマイナスを扱わない
"=をファイル名の一部と認識させない
set isfname-== isfname+=32
set virtualedit=all " allow virtual editing in all modes
set shell=zsh
"オートコメントアウト無効
au FileType * setlocal formatoptions-=ro
"w!!でsudoで保存"
cabbr w!! w !sudo tee > /dev/null %
"バックアップ設定{{{
"アンドゥファイル用のディレクトリ
set undodir=~/.vim/backup/undo
call s:mkdir(&undodir, 'p')

"スワップファイル用ディレクトリ
set dir=~/.vim/backup/swp
call s:mkdir(&dir, 'p')

"オンにすると、バッファをファイルに保存したときにアンドゥ履歴がアンドゥファイルに自動的に保存され、
"後でそのファイルを開いたときにアンドゥファイルからアンドゥ履歴が復元される。
set undofile"}}}
" 必要ないデフォルトプラグインを読み込まない{{{
let g:did_install_default_menus   = 1
let g:did_install_syntax_menu     = 1
let g:loaded_2html_plugin         = 1
let g:loaded_getscript            = 1
let g:loaded_getscriptPlugin      = 1
let g:loaded_gzip                 = 1
let g:loaded_netrw                = 1
let g:loaded_netrwFileHandlers    = 1
let g:loaded_netrwPlugin          = 1
let g:loaded_netrwSettings        = 1
let g:loaded_rrhelper             = 1
let g:loaded_tar                  = 1
let g:loaded_tarPlugin            = 1
let g:loaded_vimball              = 1
let g:loaded_vimballPlugin        = 1
let g:loaded_zip                  = 1
let g:loaded_zipPlugin            = 1
let g:no_gvimrc_example           = 1
let g:no_vimrc_example            = 1
let g:skip_loading_mswin          = 1"}}}
"保存時の設定{{{
"末尾の空白削除
autocmd BufWritePre * :%s/\s\+$//ge
" json formatter
autocmd FileType json autocmd BufWritePre <buffer> %!python -m json.tool
"強制全保存終了を無効化。
nnoremap ZZ <Nop>
nnoremap <C-d> <Nop>
" 保存時に存在しないディレクトリを作成
augroup vimrc-auto-mkdir
  autocmd!
  autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
  function! s:auto_mkdir(dir, force)
    if !isdirectory(a:dir) && (a:force ||
    \    input(printf('"%s" does not exist. Create? [y/N]', a:dir)) =~? '^y\%[es]$')
      call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
  endfunction
augroup END
"}}}
" 表示設定{{{
set laststatus=2   " ステータス行を常に表示
set cmdheight=2    " メッセージ表示欄を2行確保
set showmatch      " 対応する括弧を強調表示
set helpheight=999 " ヘルプを画面いっぱいに開く
set list           " 不可視文字を表示
set breakindent    " インデントされた行の折り返しを綺麗に
"" 不可視文字の表示記号指定
set listchars=tab:\|-,trail:-,nbsp:%,eol:↲,extends:❯,precedes:❮
set foldmethod=marker
set lazyredraw " lazy drawing
set ttyfast
"}}}
"移動設定{{{
set backspace=indent,eol,start " Backspaceキーの影響範囲に制限を設けない
set whichwrap=b,s,h,l,<,>,[,]  " 行頭行末の左右移動で行をまたぐ
set scrolloff=8                " 上下8行の視界を確保
set sidescrolloff=16           " 左右スクロール時の視界を確保
set sidescroll=1               " 左右スクロールは一文字づつ行う
"}}}
"ファイル処理関連{{{
set confirm  " 保存されていないファイルがあるときは終了前に保存確認
set hidden   " 保存されていないファイルがあるときでも別のファイルを開くことが出来る
set autoread " 外部でファイルに変更がされた場合は読みなおす
"}}}
"検索設定{{{
set hlsearch   " 検索文字列をハイライトする
set incsearch  " インクリメンタルサーチを行う
set ignorecase " 大文字と小文字を区別しない
set smartcase  " 大文字と小文字が混在した言葉で検索を行った場合に限り、大文字と小文字を区別する
set wrapscan   " 最後尾まで検索を終えたら次の検索で先頭に移る
"}}}
"タブ、インデント設定{{{
autocmd FileType js  setlocal sw=2 sts=2 ts=2 et
autocmd FileType vue  setlocal sw=2 sts=2 ts=2 et
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
set expandtab     " タブ入力を複数の空白入力に置き換える
set tabstop=4     " 画面上でタブ文字が占める幅
set shiftwidth=4  " 自動インデントでずれる幅
set softtabstop=4 " 連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅
set autoindent    " 改行時に前の行のインデントを継続する
set smartindent   " 改行時に入力された行の末尾に合わせて次の行のインデントを増減する
"}}}
"コピペ関連{{{
set clipboard=unnamed,unnamedplus " OSのクリップボードをレジスタ指定無しで Yank, Put 出来るようにする
set mouse=                        " マウスの入力を受け付ける
"}}}
"コマンドライン関連{{{
set wildmenu wildmode=list:longest,full " コマンドラインモードでTABキーによるファイル名補完を有効にする
set history=1000                        " コマンドラインの履歴を1000件保存する
set visualbell t_vb=                    " ビープ音すべてを無効にする
"}}}
" utf-8{{{
set fileencoding=utf-8
set encoding=utf-8
scriptencoding utf-8"}}}
"ファイルをひらいたとき最後にカーソルがあった場所に移動{{{
augroup vimrcEx
  au BufRead * if line("'\"") > 0 && line("'\"") <= line("$") |
  \ exe "normal g`\"" | endif
augroup END
"}}}
" プラグインマネージャ設定{{{
let s:minpac_dir = expand($VIMHOME.'/pack/minpac') "プラグインがインストールされるディレクトリ
call s:mkdir(s:minpac_dir.'/opt', 'p')

let s:minpac_download = 0
" minpac 本体
let s:minpac_repo_dir = s:minpac_dir .'/opt/minpac'
" minpac がなければ github から落としてくる
if has('vim_starting')
  if !isdirectory(s:minpac_repo_dir)
    echo "Install minpac ..."
    execute '!git clone --depth 1 https://github.com/k-takata/minpac ' . s:minpac_repo_dir
    let s:minpac_download = 1
  endif
endif
"}}}
" Load conf.d/*.vim{{{
function! s:load_configurations() abort
  for path in glob('$VIMHOME/conf.d/*.vim', 1, 1, 1)
    execute printf('source %s', fnameescape(path))
  endfor
endfunction
call s:load_configurations()
"}}}
" plugin設定
source $VIMHOME/minpack.vim
