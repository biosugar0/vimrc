# denops plugins {{{
[[plugins]]
repo = 'lambdalisue/vim-guise'
on_ft = 'terminal'
depends = ['denops.vim']
hook_add = '''
  let g:guise_edit_opener='vsplit'
'''
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['impatient.nvim','denops.vim','mason.nvim', 'schemastore.nvim', 'mason-lspconfig.nvim','mason-null-ls.nvim','none-ls.nvim','fidget.nvim','denops-popup-preview.vim']
lua_source = '''
require("biosugar0.plugins.lsp")
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
depends = ['denops.vim']
hook_add = '''
let g:popup_preview_config = {
        \ 'delay': 1,
        \ 'maxWidth': 100,
        \ 'winblend': 0,
        \ }
'''
lua_source = '''
vim.fn['popup_preview#enable']()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_add = '''
let g:lsp_signature_help_enabled = 0
let g:signature_help_config = {
    \ 'style': "currentLabelOnly",
    \ }
'''
lua_source = '''
vim.fn['signature_help#enable']()
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends =['denops.vim','kensaku.vim']
on_cmd = 'FuzzyMotion'
hook_add = '''
nnoremap <Leader>s <Cmd>FuzzyMotion<CR>
let g:fuzzy_motion_matchers=['fzf','kensaku']
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']

[[plugins]]
repo = 'yuki-yano/ai-review.vim'
on_cmd = ['AiReview','AiReviewResponse','AiReviewCancel']
depends = ['denops.vim','ddu.vim']
hook_source = '''
call ddu#custom#patch_global({
  \ 'kindOptions': {
  \   'ai-review-request': {
  \     'defaultAction': 'open',
  \   },
  \   'ai-review-log': {
  \     'defaultAction': 'resume',
  \   },
  \ }
  \ })
call ai_review#config({ 'chat_gpt': { 'model': 'gpt-4-turbo' } })
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'skanehira/denops-silicon.vim'
on_cmd = 'Silicon'
depends = ['denops.vim']
hook_source = '''
let g:silicon_options = {
      \  'font': 'Hack Nerd Font Mono',
      \  'no_line_number': v:true,
      \  'no_round_corner': v:true,
      \  'no_window_controls': v:true,
      \  'background_color': '#000000',
      \  'pad_horiz': 0,
      \  'pad_vert': 0,
      \  'tab_width': 4,
      \  'theme': 'Coldark-Dark',
      \ }
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = [
    'denops.vim',
    'context_filetype.vim',
    'pum.vim',
    'vim-vsnip',
    'nvim-lspconfig',
    'ddc-source-vsnip',
    'skkeleton',
    'lexima.vim',
    'denops-signature_help',
    'denops-popup-preview.vim',
]
on_event = ['InsertEnter','CursorHold','CmdlineEnter']
hook_post_source = "lua require('biosugar0.plugins.ddc')"

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_source = 'ddc.vim'
hook_source = '''
let g:context_filetype#ignore_patterns = {
    \ 'toml': ['^\s*#\s*'],
    \ }
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ['denops.vim']
on_cmd= '<Plug>(skkeleton-'
hook_add = '''
imap ,, <Plug>(skkeleton-toggle)
cmap ,, <Plug>(skkeleton-toggle)
'''
hook_source = '''
let g:skk_dir = expand('~/.local/share/skk')
let g:globalJisyo = g:skk_dir .. '/SKK-JISYO.L'
if !filereadable(g:globalJisyo)
  echomsg 'Installing skk global jisyo ...'
  let s:gzipfile = g:globalJisyo .. '.gz'
  call system('curl -fLo ' .. s:gzipfile .. ' --create-dirs '
        \ .. 'https://skk-dev.github.io/dict/SKK-JISYO.L.gz')
  call system('gzip -d ' .. s:gzipfile)
endif
'''

# }}}

[[plugins]]
repo = 'monaqa/dial.nvim'
on_map = ['<Plug>(dial-']
hook_add = '''
  nmap  <c-a>  <Plug>(dial-increment)
  nmap  <c-x>  <Plug>(dial-decrement)
  vmap  <c-a>  <Plug>(dial-increment)
  vmap  <c-x>  <Plug>(dial-decrement)
  vmap g<c-a> g<Plug>(dial-increment)
  vmap g<c-x> g<Plug>(dial-decrement)
'''
hook_source = 'lua require("biosugar0.plugins.dial")'



[[plugins]]
repo = 'williamboman/mason.nvim'
lua_source = '''
local mason = require('mason')
mason.setup({ ui = { icons = { package_installed = "✓", package_pending = "➜", package_uninstalled = "✗" } } })
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'jayp0521/mason-null-ls.nvim'
depends = ['plenary.nvim']
on_source = 'mason.vim'

[[plugins]]
repo = 'nvimtools/none-ls.nvim'
depends = ['plenary.nvim']
on_source = 'mason.vim'

[[plugins]]
repo = 'b0o/schemastore.nvim'
on_source = 'mason.vim'

[[plugins]]
repo = 'folke/neodev.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_source = 'nvim-lspconfig'
rev = 'legacy'
hook_source = '''
lua require("fidget").setup({})
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = false
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source= 'lua require("biosugar0.plugins.nvim-treesitter")'

[[plugins]]
repo = 'previm/previm'
on_ft = ['markdown']
hook_source = '''
let g:previm_open_cmd = 'open -a Google\ Chrome'
let g:previm_enable_realtime = 1
'''

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown']
[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'
[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = 'markdown'

[[plugins]]
repo ='mattn/vim-goaddtags'
on_ft = ['go']
hook_source = '''
let g:go_addtags_transform = 'camelcase'
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = ['h', 'help']
hook_add  = '''
set helplang=ja " help日本語化
'''

[[plugins]]
repo = 'lambdalisue/vim-gin'
on_func = 'gin#component*'
on_cmd = ['Gin', 'Gin*']
depends = ['denops.vim']
hook_add = '''
nnoremap <silent> <Leader>aa <Cmd>GinStatus<CR>
nnoremap <silent> <Leader>ab <Cmd>GinBranch --all<CR>
nnoremap <silent> <Leader>ap <Cmd>Gin push<CR>
nnoremap <silent> <Leader>ac <Cmd>Gin commit<CR>
nnoremap <silent> <Leader>aC <Cmd>Gin commit --amend<CR>
nnoremap <silent> <Leader>al :<C-u>GinLog<CR>
nnoremap <silent> <Leader>aL :<C-u>GinLog -- %<CR>
nnoremap <silent> <Leader>ao <Cmd>GinBrowse <CR>
xnoremap <silent> <Leader>ao :GinBrowse <CR>
nnoremap <silent> <leader>aw <Cmd>GinBrowse --pr<CR>
'''
hook_source = '''
autocmd FileType gin-status nnoremap <buffer> c <Cmd>Gin commit<CR>
autocmd User GinComponentPost redrawtabline
call gin#component#branch#ascii()
let g:gin_diff_default_args = [
      \ '++processor=delta --diff-highlight --keep-plus-minus-markers',
      \]
let g:gin_browse_default_args = [
      \ '--remote=origin',
      \ '--permalink',
      \]
let g:gin_log_default_args = [
      \ '++emojify',
      \ '--pretty=%C(yellow)%h%C(reset)%C(auto)%d%C(reset) %s %C(cyan)@%an%C(reset) %C(magenta)[%ar]%C(reset)',
      \]
if dein#tap('ddc.vim')
  call ddc#custom#patch_filetype('gitcommit', 'specialBufferCompletion', v:true)
  call ddc#custom#patch_filetype('gitcommit', 'specialBufferCompletion', v:true)
endif
'''

[plugins.ftplugin]
gin-branch = '''
  nnoremap <buffer> n <Plug>(gin-action-new)
  nnoremap <buffer> dd <Plug>(gin-action-delete)
'''

[[plugins]]
repo = 'lambdalisue/vim-gina'
on_cmd = 'Gina'
hook_add = '''
nnoremap <silent> <leader>aw <Cmd>Gina browse --scheme=pr<CR>
'''
hook_post_source = '''
call extend(g:gina#command#browse#translation_patterns['github\.com'][1],
              \ {'pr':'https://\1/\2/\3/pull/new/%c0'}
              \)
'''

[[plugins]]
repo =  'tpope/vim-dispatch'
on_event = 'CursorHold'
hook_add = '''
let g:dispatch_no_tmux_make = 1
'''

[[plugins]]
repo = 'vim-test/vim-test'
on_cmd = [
   'Test'
]
hook_add = '''
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>
let test#go#gotest#options = {
  \ 'nearest': '-v -count=1',
  \ 'file':    '-v -count=1',
  \ 'suite':   '-v -count=1',
\}

let test#strategy = 'dispatch'
'''


[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = { vonx = ['<Plug>(operator-sandwich-','<Plug>(sandwich-'] }
hook_post_source = '''
call operator#sandwich#set('add', 'char', 'skip_space', 1)
'''
hook_add = '''
" add
let g:sandwich_no_default_key_mappings = 1
nmap sa <Plug>(sandwich-add)
xmap sa <Plug>(sandwich-add)
omap sa <Plug>(sandwich-add)

" delete
nmap sd <Plug>(sandwich-delete)
xmap sd <Plug>(sandwich-delete)
nmap sdb <Plug>(sandwich-delete-auto)

" replace
nmap sr <Plug>(sandwich-replace)
xmap sr <Plug>(sandwich-replace)
nmap srb <Plug>(sandwich-replace-auto)

omap ib <Plug>(textobj-sandwich-auto-i)
xmap ib <Plug>(textobj-sandwich-auto-i)
omap ab <Plug>(textobj-sandwich-auto-a)
xmap ab <Plug>(textobj-sandwich-auto-a)
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = { nx = '<Plug>(EasyAlign)' }
hook_add = '''
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo ='kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = { n = '<Plug>(operator-replace)' }
hook_add = '''
nmap <leader>r <Plug>(operator-replace)
'''


[[plugins]]
repo ='thinca/vim-qfreplace'
on_ft = ['qf']
[plugins.ftplugin]
qf = '''
  nnoremap <buffer> r <Cmd>Qfreplace<CR>
'''

[[plugins]]
repo ='yssl/QFEnter'
on_ft = ['qf']

[[plugins]]
repo = 'kana/vim-altr'
on_ft = ['go']
on_event = 'CursorHold'
hook_source = '''
function! s:makegotest() abort
  let src=expand("%:p:r")
  let filex=expand("%:p:e")
  if filex != "go"
      return
  endif
  if expand("%:p:r") !~ "test$"
      let src.="_test"
  endif
  let src.=".go"
  let chk=getftype(src)
  if chk == "file"
      return
  endif
  call writefile(["package"],src)
endfunction

nnoremap <SID>(makegotest) <Cmd>call <SID>makegotest()<CR>
nmap <leader>t <SID>(makegotest)<Plug>(altr-forward)
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = ['BufReadPre', 'BufNewFile']
hook_source = 'lua require("biosugar0.plugins.gitsigns")'

[[plugins]]
repo = 'hrsh7th/vim-eft'
on_map = { nxo = '<Plug>(eft-' }
hook_source = '''
let g:eft_ignorecase = v:true
'''
hook_add = '''
nmap f <Plug>(eft-f-repeatable)
xmap f <Plug>(eft-f-repeatable)
omap f <Plug>(eft-f-repeatable)
nmap F <Plug>(eft-F-repeatable)
xmap F <Plug>(eft-F-repeatable)
omap F <Plug>(eft-F-repeatable)

nmap t <Plug>(eft-t-repeatable)
xmap t <Plug>(eft-t-repeatable)
omap t <Plug>(eft-t-repeatable)
nmap T <Plug>(eft-T-repeatable)
xmap T <Plug>(eft-T-repeatable)
omap T <Plug>(eft-T-repeatable)
'''


[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'InsertEnter'
hook_source = '''
  let g:echodoc#type = has('nvim') ? 'floating' : 'popup'
  let g:echodoc#events = ['PumCompleteDone', 'TextChangedP', 'PumCompleteChanged']
'''
hook_post_source = '''
  call echodoc#enable()
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_map  = [
'<Leader>f',
'<Leader>gf',
'<Leader>gF',
'<Leader>b ',
'<Leader>l ',
'<Leader>h ',
'<Leader>m ',
'<Leader>R ',
]
on_cmd = [
    'Files',
    'GFiles',
    'Buffers',
    'BLines',
    'History',
    'Mark',
    'Rg',
    'HelpRg',
]
hook_source= '''
let $FZF_DEFAULT_OPTS="--layout=reverse"
let $FZF_DEFAULT_COMMAND="rg --line-number --no-heading --files --hidden --glob '!.git/**'"

let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'border': 'sharp' } }
nnoremap <silent> <Leader>f :Files<CR>
nnoremap <silent> <Leader>gf :GFiles<CR>
nnoremap <silent> <Leader>gF :GFiles?<CR>
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>l :BLines<CR>
nnoremap <silent> <Leader>h :History<CR>
nnoremap <silent> <Leader>m :Mark<CR>
nnoremap <silent> <Leader>R :Rg<CR>
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
autocmd FileType fzf tnoremap <silent> <buffer> <Esc> <C-g>

let g:fzf_action = {
                \'ctrl-t':'tab split',
                \'ctrl-s':'split',
                \'ctrl-e':'edit',
                \'enter':'vsplit'
                \}


let &grepprg = 'rg --json $* \| jq -r ''select(.type=="match")\|.data as $data\|$data.submatches[]\|"\($data.path.text):\($data.line_number):\(.start+1):\(.end+1):\($data.lines.text//""\|sub("\n$";""))"'

command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}, 'right:50%:wrap'))

inoremap <expr> <c-f><c-i> fzf#vim#complete('gopkgs -format "{{.ImportPath}}"')

let g:helppaths = uniq(sort(split(globpath(&runtimepath, 'doc/**', 1), '\n')))
command! -bang -nargs=* HelpRg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading -g "*" "" '. join(g:helppaths).shellescape(<q-args>), 1,
      \   fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}, 'right:90%'), <bang>0)

'''
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
on_source = ['lualine.nvim']

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
on_event = 'CursorHold'
hook_source = 'lua require("biosugar0.plugins.lualine")'

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
on_cmd  = [
    'TmuxNavigateLeft',
    'TmuxNavigateDown',
    'TmuxNavigateUp',
    'TmuxNavigateRight',
    'TmuxNavigatePrevious',
]
hook_add = '''
" <C-w> 系を Vim Tmux Navigator に移譲する
nnoremap <silent> <C-w>h :TmuxNavigateLeft<cr>
nnoremap <silent> <C-w>j :TmuxNavigateDown<cr>
nnoremap <silent> <C-w>k :TmuxNavigateUp<cr>
nnoremap <silent> <C-w>l :TmuxNavigateRight<cr>
nnoremap <silent> <C-w>\\ :TmuxNavigatePrevious<cr>
'''

[[plugins]]
repo = 'skanehira/translate.vim'
on_map = { xn = ['<Plug>(Translate)','<Plug>(VTranslate)']}
hook_add = '''
let g:translate_source = "en"
let g:translate_target = "ja"
let g:translate_winsize = 10
nmap tr <Plug>(Translate)
vmap tr <Plug>(VTranslate)
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = ['<Plug>(asterisk-']
on_source = ['nvim-hlslens']
hook_add = '''
map *  <Plug>(asterisk-z*)
map #  <Plug>(asterisk-z#)
map g* <Plug>(asterisk-gz*)
map g# <Plug>(asterisk-gz#)
'''

[[plugins]]
repo = 'machakann/vim-textobj-delimited'
depends = ['vim-textobj-user']
on_map = ['vid', 'viD', 'vad', 'vaD']

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = ['vim-textobj-user']
on_map = ['i,','a,' ]

[[plugins]]
repo ='mattn/vim-findroot'
on_event = 'BufRead'
hook_source = '''
let g:findroot_not_for_subdir = 0
'''

[[plugins]]
repo ='t9md/vim-textmanip'
on_map = '<Plug>(textmanip-'
hook_add = '''
xmap <Space>d <Plug>(textmanip-duplicate-down)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>D <Plug>(textmanip-duplicate-up)
nmap <Space>D <Plug>(textmanip-duplicate-up)

xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = [
 'Linediff',
]
hook_source = '''
let g:linediff_first_buffer_command  = 'leftabove new'
let g:linediff_second_buffer_command = 'rightbelow vertical new'
augroup LineDiff
  au!
  autocmd User LinediffBufferReady nnoremap <buffer> <silent> q :<C-u>LinediffReset<CR>
augroup END
'''
[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd= [
    'MemoNew',
    'MemoList',
    'MemoGrep',
]
hook_add = '''
let g:memolist_path = $HOME."/memo"
let g:memolist_fzf = 1
let g:memolist_memo_suffix = "md"
nmap mn <Cmd>MemoNew<CR>
nmap ml <Cmd>MemoList<CR>
nmap mg <Cmd>MemoGrep<CR>
'''

[[plugins]]
repo = 'zbirenbaum/copilot.lua'
on_event = 'InsertEnter'
lua_source = '''
require("biosugar0.plugins.copilot")
'''

[[plugins]]
repo = 'gen740/SmoothCursor.nvim'
on_event = 'BufRead'
lua_source = '''
require("biosugar0.plugins.smooth-cursor")
'''

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-zsh'
on_source = 'ddc.vim'
depends = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'


[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_truncate_abbr'
on_source = 'ddc.vim'


[[plugins]]
repo = 'Shougo/ddc-omni'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-inline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-none'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-dictionary'
on_source = 'ddc.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc-source-vsnip'

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'
depends = ['vim-vsnip']

[[plugins]]
repo = 'cohama/lexima.vim'
on_source = 'ddc.vim'
hook_add = '''
let g:lexima_ctrlh_as_backspace = 1
let g:lexima_no_default_rules = v:true
'''
hook_source = '''
call lexima#set_default_rules()
'''
[[plugins]]
repo = 'lambdalisue/vim-kensaku'

[[plugins]]
repo = 'epwalsh/obsidian.nvim'
depends = ['plenary.nvim']
on_event = 'BufRead'
lua_source = '''
require("biosugar0.plugins.obsidian")
'''
