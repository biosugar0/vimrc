[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['InsertEnter', 'CursorHold']
depends = ['denops.vim', 'pum.vim']
hook_source = '''
  set completeopt=menuone,noinsert,noselect
  setlocal signcolumn=yes
  call ddc#custom#patch_global('sources', ['nvim-lsp', 'vsnip',  'around','dictionary', 'file'])
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })
  call ddc#custom#patch_global('sourceOptions', {
        \ '_': {
        \   'ignoreCase': v:true,
        \   'matchers': ['matcher_fuzzy'],
        \   'sorters': ['sorter_fuzzy'],
        \   'converters': ['converter_remove_overlap']},
        \ 'around': {
        \   'mark': 'around' },
        \ 'nvim-lsp': {
        \   'mark': 'lsp',
        \   'matchers': ['matcher_head'],
        \   'forceCompletionPattern': '\.|:|->|"\w+/*' },
        \ 'dictionary': {
        \   'matchers': ['matcher_fuzzy'],
        \   'sorters': ['sorter_fuzzy'],
        \   'converters': ['converter_fuzzy'],
        \   'maxCandidates': 16,
        \   'mark': 'D',
        \   'minAutoCompleteLength': 3,
        \ },
        \ 'file': {
        \   'mark': 'file',
        \   'isVolatile': v:true,
        \   'forceCompletionPattern': '\S/\S*' },
        \ 'vsnip': {'dup': v:true, 'mark': 'snip'},
        \ })

   " Change source params
  call ddc#custom#patch_global('sourceParams', {
    \ 'nvim-lsp': {
    \   'maxSize': 100,
    \ },
    \ 'around': {
    \   'maxSize': 100,
    \ },
    \ 'dictionary': {
    \   'dictPaths': ['/usr/share/dict/words'],
    \   'smartCase': v:true,
    \   'showMenu': v:false
    \ },
    \ })

  call ddc#enable()
'''

[[plugins]]
repo = 'mopp/vim-operator-convert-case'
on_map = '<Plug>(operator-convert-case-'
hook_add = '''
nmap clc <Plug>(operator-convert-case-lower-camel)iw
nmap cuc <Plug>(operator-convert-case-upper-camel)iw
nmap cls <Plug>(operator-convert-case-lower-snake)iw
nmap cus <Plug>(operator-convert-case-upper-snake)iw
nmap ctt <Plug>(operator-convert-case-toggle-upper-lower)iw
nmap cll <Plug>(operator-convert-case-loop)iw
nmap ccc <Plug>(operator-convert-case-convert)iw
vmap clc <Plug>(operator-convert-case-lower-camel)gv
vmap cuc <Plug>(operator-convert-case-upper-camel)gv
vmap cls <Plug>(operator-convert-case-lower-snake)gv
vmap cus <Plug>(operator-convert-case-upper-snake)gv
vmap ctt <Plug>(operator-convert-case-toggle-upper-lower)gv
vmap cll <Plug>(operator-convert-case-loop)gv
vmap ccc <Plug>(operator-convert-case-convert)gv
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'lambdalisue/guise.vim'
on_ft = 'terminal'
depends = 'denops.vim'
hook_add = '''
  let g:guise_edit_opener='vsplit'
'''

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-dictionary'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
on_event= ['InsertEnter', 'CmdlineEnter','CursorHold']
hook_add = '''
  inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
'''
hook_source = '''
  hi NoneBg guibg=none
  call pum#set_option('max_width', 80)
  call pum#set_option('border', '')
  call pum#set_option('padding', v:true)
  call pum#set_option('highlight_normal_menu', "NoneBg")
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
depends = ['vim-vsnip-integ','pum.vim']
hook_add = '''
function s:trigger_completedone()
  let info = pum#complete_info()
  let complete_item = info.items[info.selected]
  call vsnip_integ#on_complete_done(complete_item)
  if vsnip#available(1)
    return "\<Plug>(vsnip-expand-or-jump)"
  else
    return "\<Tab>"
endfunction

imap <expr> <Tab> <SID>trigger_completedone()
smap <expr> <Tab> <SID>trigger_completedone()
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
'''
[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'
depends = 'pum.vim'
hook_source = '''
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = 'ddc.vim'
on_event = 'CursorHold'
depends = ['pum.vim','mason-lspconfig.nvim','fidget.nvim','denops-signature_help']
hook_source= '''
lua << EOF
local on_attach = function(client, bufnr)
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', 'gT', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', '<space>e', vim.lsp.diagnostic.show_line_diagnostics, bufopts)
  vim.keymap.set('n', '[d', vim.lsp.diagnostic.goto_prev, bufopts)
  vim.keymap.set('n', ']d', vim.lsp.diagnostic.goto_next, bufopts)
  vim.keymap.set('n', '<space>q', vim.lsp.diagnostic.set_loclist, bufopts)
  vim.keymap.set('n', '<space>f', vim.lsp.buf.formatting, bufopts)
  buf_set_option( 'omnifunc', 'v:lua.vim.lsp.omnifunc')
end

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true
capabilities.textDocument.completion.completionItem.resolveSupport = {
  properties = {
    'documentation',
    'detail',
    'additionalTextEdits'
  }
}

local nvim_lsp = require('lspconfig')
local mason_lspconfig = require('mason-lspconfig')

local settings = {
    sumneko_lua = {
        Lua = {
            runtime = {
                version = 'LuaJIT',
            },
            diagnostics = {
                globals = { 'vim' },
            },
            workspace = {
                library = vim.api.nvim_get_runtime_file("", true),
            },
            telemetry = {
                enable = false,
            },
            completion = {
                callSnippet = 'Replace',
            },
        },
    },
    gopls = {
        gopls = {
            usePlaceholders = true,
            completeUnimported = true,
            staticcheck = true,
            analyses = {
                nonewvars = true,
                unusedparams = true,
            },
        },
    },
}


mason_lspconfig.setup_handlers({ function(server_name)
  local opts = {}
  opts.on_attach = on_attach
  opts.capabilities = capabilities
  opts.settings = settings[target],
  nvim_lsp[server_name].setup(opts)
end })

EOF
'''


[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
local mason = require('mason')
mason.setup({ ui = { icons = { package_installed = "✓", package_pending = "➜", package_uninstalled = "✗" } } })
EOF
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'matsui54/denops-signature_help'
depends = 'denops.vim'
on_source = 'ddc.vim'
hook_source = '''
let g:lsp_signature_help_enabled = 0
let g:signature_help_config = {
    \ 'style': "currentLabelOnly",
    \ }
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
depends = 'denops.vim'
on_source = 'ddc.vim'
hook_source = '''
let g:popup_preview_config = {
        \ 'delay': 10,
        \ 'maxWidth': 100,
        \ 'winblend': 0,
        \ }
call popup_preview#enable()
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua require("fidget").setup({})
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'

[[plugins]]
repo = 'David-Kunz/treesitter-unit'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
depends = ['nvim-treesitter-textobjects', 'treesitter-unit']
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source= '''
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {"vim", "toml", "python", "go","hcl"},

  highlight = {
    enable = true,
    disable = {
      'lua',
      'ruby',
      'toml',
      'c_sharp',
      'vue',
    }
  },
  indent = {
    enable = true,
  },
  textobjects = {
      select = {
          enable = true,
          lookahead = true,
          keymaps = {
              ["ib"] = "@block.inner",
              ["ab"] = "@block.outer",
              ["c"] = "@comment.outer",
              ["if"] = "@function.inner",
              ["af"] = "@function.outer",
              ["il"] = "@loop.inner",
              ["al"] = "@loop.outer",
          },
      },
      swap = {
          enable = true,
          swap_next = {
              ["<M-s>"] = "@parameter.inner",
          },
          swap_previous = {
              ["<M-S-s>"] = "@parameter.inner",
          },
      },
  },
}
EOF
'''

[[plugins]]
repo = 'previm/previm'
on_ft = ['markdown']
[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown']

[[plugins]]
repo ='mattn/vim-goaddtags'
on_ft = ['go']
hook_source = '''
let g:go_addtags_transform = 'camelcase'
'''

[[plugins]]
repo ='mattn/vim-goimports'
on_ft = ['go']


[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = ['h', 'help']
hook_add  = '''
set helplang=ja " help日本語化
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
let g:gina#command#blame#formatter#format ="%au%=on %ti %ma%in"

nnoremap <silent> <Leader>aa :<C-u>Gina status<CR>
nnoremap <silent> <Leader>aA :<C-u>Gina changes HEAD<CR>
nnoremap <silent> <Leader>ac :<C-u>Gina commit<CR>
nnoremap <silent> <Leader>aC :<C-u>Gina commit --amend<CR>
nnoremap <silent> <Leader>ab :<C-u>Gina branch -av<CR>
nnoremap <silent> <Leader>at :<C-u>Gina tag<CR>
nnoremap <silent> <Leader>ag :<C-u>Gina grep<CR>
nnoremap <silent> <Leader>aq :<C-u>Gina qrep<CR>
nnoremap <silent> <Leader>ap :<C-u>Gina push<CR>
nnoremap <silent> <Leader>ad :<C-u>Gina changes origin/HEAD...<CR>
nnoremap <silent> <Leader>ah :<C-u>Gina log --graph<CR>
nnoremap <silent> <Leader>aH :<C-u>Gina log --graph --all<CR>
nnoremap <silent> <Leader>al :<C-u>Gina log<CR>
nnoremap <silent> <Leader>aL :<C-u>Gina log :%<CR>
nnoremap <silent> <Leader>af :<C-u>Gina ls<CR>
nnoremap <silent> <Leader>ars :<C-u>Gina show <C-r><C-w><CR>
nnoremap <silent> <Leader>arc :<C-u>Gina changes <C-r><C-w><CR>
nnoremap <silent> <Leader>ao :Gina browse --extract :<CR>
xnoremap <silent> <Leader>ao :Gina browse --extract :<CR>

command! -nargs=? PR Gina browse --scheme=pr <args>
nnoremap <leader>aw :PR<CR>
'''
hook_source = '''
call extend(g:gina#command#browse#translation_patterns['github\.com'][1],
              \ {'pr':'https://\1/\2/\3/pull/new/%c0'}
              \)
call gina#custom#command#option(
      \ 'commit', '-v|--verbose'
      \)
call gina#custom#command#option(
      \ '/\%(status\|commit\)',
      \ '-u|--untracked-files'
      \)
call gina#custom#command#option(
      \ 'status',
      \ '-b|--branch'
      \)
call gina#custom#command#option(
      \ 'status',
      \ '-s|--short'
      \)
call gina#custom#command#option(
      \ '/\%(commit\|tag\)',
      \ '--restore'
      \)
call gina#custom#mapping#nmap(
      \ 'status', '<C-^>',
      \ ':<C-u>Gina commit<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#mapping#nmap(
      \ 'commit', '<C-^>',
      \ ':<C-u>Gina status<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#mapping#nmap(
      \ 'status', '<C-6>',
      \ ':<C-u>Gina commit<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#mapping#nmap(
      \ 'commit', '<C-6>',
      \ ':<C-u>Gina status<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'preview',
      \ 'topleft show:commit:preview',
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'p',
      \ ':<C-u>call gina#action#call(''preview'')<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)

call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'changes',
      \ 'topleft changes:of:preview',
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'c',
      \ ':<C-u>call gina#action#call(''changes'')<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)

call gina#custom#execute(
      \ '/\%(ls\|log\|reflog\|grep\)',
      \ 'setlocal noautoread',
      \)
call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|log\|reflog\|grep\)',
      \ 'setlocal cursorline',
      \)

call gina#custom#command#option(
      \ '/\%(branch\|changes\|grep\|log\|show\)',
      \ '--opener', 'vsplit'
      \)
call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|grep\|changes\|tag\)',
      \ 'setlocal winfixheight',
      \)

call gina#custom#mapping#nmap(
      \ 'branch',
      \ 'dd',
      \ '<Plug>(gina-branch-delete)',
      \ {'mode': 'n', 'silent': 1}
      \)
call gina#custom#mapping#nmap(
      \ 'branch',
      \ 'n',
      \ '<Plug>(gina-branch-new)',
      \ {'nmap': 1, 'silent': 1}
      \)
'''

[[plugins]]
repo =  'tpope/vim-dispatch'
on_event = 'CursorHold'
hook_add = '''
let g:dispatch_no_tmux_make = 1
'''


[[plugins]]
repo = 'vim-test/vim-test'
on_cmd = [
   'Test'
]
hook_add = '''
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>
let test#go#gotest#options = {
  \ 'nearest': '-v -count=1',
  \ 'file':    '-v -count=1',
  \ 'suite':   '-v -count=1',
\}

let test#strategy = 'dispatch'
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = 'denops.vim'
on_cmd = 'FuzzyMotion'
hook_add = '''
nnoremap ss <Cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = { vonx = ['<Plug>(operator-sandwich-','<Plug>(sandwich-'] }
hook_add = '''
" add
let g:sandwich_no_default_key_mappings = 1
nmap sa <Plug>(sandwich-add)
xmap sa <Plug>(sandwich-add)
omap sa <Plug>(sandwich-add)

" delete
nmap sd <Plug>(sandwich-delete)
xmap sd <Plug>(sandwich-delete)
nmap sdb <Plug>(sandwich-delete-auto)

" replace
nmap sr <Plug>(sandwich-replace)
xmap sr <Plug>(sandwich-replace)
nmap srb <Plug>(sandwich-replace-auto)

omap ib <Plug>(textobj-sandwich-auto-i)
xmap ib <Plug>(textobj-sandwich-auto-i)
omap ab <Plug>(textobj-sandwich-auto-a)
xmap ab <Plug>(textobj-sandwich-auto-a)

omap is <Plug>(textobj-sandwich-query-i)
xmap is <Plug>(textobj-sandwich-query-i)
omap as <Plug>(textobj-sandwich-query-a)
xmap as <Plug>(textobj-sandwich-query-a)
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = { nx = '<Plug>(EasyAlign)' }
hook_add = '''
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo ='kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = { n = '<Plug>(operator-replace)' }
hook_add = '''
nmap <leader>r <Plug>(operator-replace)
'''

[[plugins]]
repo ='t9md/vim-textmanip'

[[plugins]]
repo ='thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

[[plugins]]
repo ='tpope/vim-repeat'
on_map = ['.']

[[plugins]]
repo ='yssl/QFEnter'
on_ft = ['qf']

[[plugins]]
repo = 'kana/vim-altr'
on_ft = ['go']
on_event = 'CursorHold'
hook_source = '''
function! s:makegotest() abort
  let src=expand("%:p:r")
  let filex=expand("%:p:e")
  if filex != "go"
      return
  endif
  if expand("%:p:r") !~ "test$"
      let src.="_test"
  endif
  let src.=".go"
  let chk=getftype(src)
  if chk == "file"
      return
  endif
  call writefile(["package"],src)
endfunction

nnoremap <SID>(makegotest) <Cmd>call <SID>makegotest()<CR>
nmap <leader>t <SID>(makegotest)<Plug>(altr-forward)
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'BufRead'

[[plugins]]
repo = 'hrsh7th/vim-eft'
on_map = { nxo = '<Plug>(eft-' }
hook_add = '''
" f/t/F/T を単語境界のみにマッチさせる機能を持ったプラグイン
nmap f <Plug>(eft-f-repeatable)
xmap f <Plug>(eft-f-repeatable)
omap f <Plug>(eft-f-repeatable)
nmap F <Plug>(eft-F-repeatable)
xmap F <Plug>(eft-F-repeatable)
omap F <Plug>(eft-F-repeatable)

nmap t <Plug>(eft-t-repeatable)
xmap t <Plug>(eft-t-repeatable)
omap t <Plug>(eft-t-repeatable)
nmap T <Plug>(eft-T-repeatable)
xmap T <Plug>(eft-T-repeatable)
omap T <Plug>(eft-T-repeatable)
'''

[[plugins]]
repo = 'junegunn/fzf'
hook_post_update = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
on_map  = [
'<Leader>f',
'<Leader>gf',
'<Leader>gF',
'<Leader>b ',
'<Leader>l ',
'<Leader>h ',
'<Leader>m ',
'<Leader>R ',
]
on_cmd = [
    'Files',
    'GFiles',
    'Buffers',
    'BLines',
    'History',
    'Mark',
    'Rg',
    'HelpRg',
]
depends = 'fzf'
hook_source= '''
let $FZF_DEFAULT_OPTS="--layout=reverse"
let $FZF_DEFAULT_COMMAND="rg --line-number --no-heading --files --hidden --glob '!.git/**'"

let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'border': 'sharp' } }
nnoremap <silent> <Leader>f :Files<CR>
nnoremap <silent> <Leader>gf :GFiles<CR>
nnoremap <silent> <Leader>gF :GFiles?<CR>
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>l :BLines<CR>
nnoremap <silent> <Leader>h :History<CR>
nnoremap <silent> <Leader>m :Mark<CR>
nnoremap <silent> <Leader>R :Rg<CR>
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
autocmd FileType fzf tnoremap <silent> <buffer> <Esc> <C-g>

let g:fzf_action = {
                \'ctrl-t':'tab split',
                \'ctrl-s':'split',
                \'ctrl-e':'edit',
                \'enter':'vsplit'
                \}


let &grepprg = 'rg --json $* \| jq -r ''select(.type=="match")\|.data as $data\|$data.submatches[]\|"\($data.path.text):\($data.line_number):\(.start+1):\(.end+1):\($data.lines.text//""\|sub("\n$";""))"'

command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}, 'right:50%:wrap'))

inoremap <expr> <c-f><c-i> fzf#vim#complete('gopkgs -format "{{.ImportPath}}"')

let g:helppaths = uniq(sort(split(globpath(&runtimepath, 'doc/**', 1), '\n')))
command! -bang -nargs=* HelpRg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading -g "*" "" '. join(g:helppaths).shellescape(<q-args>), 1,
      \   fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}, 'right:90%'), <bang>0)

'''

[[plugins]]
repo ='vim-airline/vim-airline'
on_event = 'BufRead'
hook_add = '''
"" ステータス
let g:airline_theme = 'badwolf'
" virtulenvを認識しているか確認用に、現在activateされているvirtualenvを表示(vim-virtualenvの拡張)
let g:airline#extensions#virtualenv#enabled = 1
" gitのHEADから変更した行の+-を非表示(vim-gitgutterの拡張)
let g:airline#extensions#hunks#enabled = 0
'''

[[plugins]]
repo ='vim-airline/vim-airline-themes'
depends = 'vim-airline'
on_source = 'vim-airline'

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
on_cmd  = [
    'TmuxNavigateLeft',
    'TmuxNavigateDown',
    'TmuxNavigateUp',
    'TmuxNavigateRight',
    'TmuxNavigatePrevious',
]
hook_add = '''
" <C-w> 系を Vim Tmux Navigator に移譲する
nnoremap <silent> <C-w>h :TmuxNavigateLeft<cr>
nnoremap <silent> <C-w>j :TmuxNavigateDown<cr>
nnoremap <silent> <C-w>k :TmuxNavigateUp<cr>
nnoremap <silent> <C-w>l :TmuxNavigateRight<cr>
nnoremap <silent> <C-w>\\ :TmuxNavigatePrevious<cr>
'''

[[plugins]]
repo = 'skanehira/translate.vim'
on_map = { xn = ['<Plug>(Translate)','<Plug>(VTranslate)']}
hook_add = '''
let g:translate_source = "en"
let g:translate_target = "ja"
let g:translate_winsize = 10
nmap tr <Plug>(Translate)
vmap tr <Plug>(VTranslate)
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
on_map = {nox = '<Plug>'}

[[plugins]]
repo ='kana/vim-operator-user'
on_map = {nox = '<Plug>'}

[[plugins]]
repo = 'kevinhwang91/nvim-hlslens'
on_event = 'BufRead'
depends = ['vim-asterisk']
hook_add = '''
lua << EOF
local kopts = {noremap = true, silent = true}

vim.api.nvim_set_keymap('n', 'n',
    [[<Cmd>execute('normal! ' . v:count1 . 'n')<CR><Cmd>lua require('hlslens').start()<CR>]],
    kopts)
vim.api.nvim_set_keymap('n', 'N',
    [[<Cmd>execute('normal! ' . v:count1 . 'N')<CR><Cmd>lua require('hlslens').start()<CR>]],
    kopts)
vim.api.nvim_set_keymap('n', '*', [[<Plug>(asterisk-z*)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('n', '#', [[<Plug>(asterisk-z#)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('n', 'g*', [[<Plug>(asterisk-gz*)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('n', 'g#', [[<Plug>(asterisk-gz#)<Cmd>lua require('hlslens').start()<CR>]], {})

vim.api.nvim_set_keymap('x', '*', [[<Plug>(asterisk-z*)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('x', '#', [[<Plug>(asterisk-z#)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('x', 'g*', [[<Plug>(asterisk-gz*)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('x', 'g#', [[<Plug>(asterisk-gz#)<Cmd>lua require('hlslens').start()<CR>]], {})

vim.api.nvim_set_keymap('n', '<Leader>l', ':noh<CR>', kopts)
EOF
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = ['<Plug>(asterisk-']
hook_add = '''
map *  <Plug>(asterisk-z*)
map #  <Plug>(asterisk-z#)
map g* <Plug>(asterisk-gz*)
map g# <Plug>(asterisk-gz#)
'''

[[plugins]]
repo = 'machakann/vim-textobj-delimited'
depends = 'vim-textobj-user'
on_map = ['vid', 'viD', 'vad', 'vaD']

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
on_map = {xo = '<Plug>(textobj-parameter'}

[[plugins]]
repo ='mattn/vim-findroot'
on_event = 'BufRead'
hook_source = '''
let g:findroot_not_for_subdir = 0
'''

[[plugins]]
repo = 'chentoast/marks.nvim'
on_source = 'vim-gitgutter'
hook_source = '''
lua << EOF
require'marks'.setup {
  default_mappings = true,
}
EOF
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_source = '''
let g:lexima_ctrlh_as_backspace = 1
'''
