[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = 'BufEnter'


[[plugins]]
repo = 'monaqa/dial.nvim'
on_map = ['<Plug>(dial-']
hook_add = '''
  nmap  <c-a>  <Plug>(dial-increment)
  nmap  <c-x>  <Plug>(dial-decrement)
  vmap  <c-a>  <Plug>(dial-increment)
  vmap  <c-x>  <Plug>(dial-decrement)
  vmap g<c-a> g<Plug>(dial-increment)
  vmap g<c-x> g<Plug>(dial-decrement)
'''
hook_post_source = 'biosuagr0.plugins.dial'

[[plugins]]
repo = 'lambdalisue/guise.vim'
on_ft = 'terminal'
depends = 'denops.vim'
hook_add = '''
  let g:guise_edit_opener='vsplit'
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = 'ddc.vim'
depends = ['impatient.nvim','denops.vim','mason-lspconfig.nvim','fidget.nvim','denops-signature_help']
hook_source = 'lua require("biosugar0.plugins.lsp")'
hook_post_source = '''
  call signature_help#enable()
  call popup_preview#enable()
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
local mason = require('mason')
mason.setup({ ui = { icons = { package_installed = "✓", package_pending = "➜", package_uninstalled = "✗" } } })
EOF
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'matsui54/denops-signature_help'
depends = 'denops.vim'
on_source = 'nvim-lspconfig'
hook_add = '''
let g:lsp_signature_help_enabled = 0
let g:signature_help_config = {
    \ 'style': "currentLabelOnly",
    \ }
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
depends = 'denops.vim'
on_source = 'nvim-lspconfig'
hook_source = '''
let g:popup_preview_config = {
        \ 'delay': 1,
        \ 'maxWidth': 100,
        \ 'winblend': 0,
        \ }
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua require("fidget").setup({})
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_source = ['nvim-treesitter']

[[plugins]]
repo = 'David-Kunz/treesitter-unit'
on_source = ['nvim-treesitter']

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
depends = ['nvim-treesitter-textobjects', 'treesitter-unit']
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source= 'lua require("biosugar0.plugins.nvim-treesitter")'

[[plugins]]
repo = 'previm/previm'
on_ft = ['markdown']
[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown']
[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'
[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = 'markdown'

[[plugins]]
repo ='mattn/vim-goaddtags'
on_ft = ['go']
hook_source = '''
let g:go_addtags_transform = 'camelcase'
'''

[[plugins]]
repo ='mattn/vim-goimports'
on_ft = 'go'
hook_source = '''
  let g:goimports_simplify = v:true
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = ['h', 'help']
hook_add  = '''
set helplang=ja " help日本語化
'''

[plugins.ftplugin]
gin-status = '''
  nnoremap <buffer> <Leader>ac <Cmd>Gin commit<CR>
  nnoremap <buffer> <Leader>aC <Cmd>Gin commit --amend<CR>
  nnoremap <buffer> <Leader>ap <Cmd>Gin push origin<CR>
'''
gin-branch = '''
  nmap <buffer> n <Plug>(gin-action-new)
  nmap <buffer> dd <Plug>(gin-action-delete)
'''
gitcommit = '''
  setlocal spell
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
let g:gina#command#blame#formatter#format ="%au%=on %ti %ma%in"

nnoremap <silent> <Leader>aa <Cmd>Gina status<CR>
nnoremap <silent> <Leader>ab <Cmd>Gina branch -av<CR>
nnoremap <silent> <Leader>aA <Cmd>Gina changes HEAD<CR>
nnoremap <silent> <Leader>ac <Cmd>Gina commit<CR>
nnoremap <silent> <Leader>aC <Cmd>Gina commit --amend<CR>
nnoremap <silent> <Leader>at <Cmd>Gina tag<CR>
nnoremap <silent> <Leader>ag <Cmd>Gina grep<CR>
nnoremap <silent> <Leader>aq <Cmd>Gina qrep<CR>
nnoremap <silent> <Leader>ad <Cmd>Gina changes origin/HEAD...<CR>
nnoremap <silent> <Leader>ah <Cmd>Gina log --graph<CR>
nnoremap <silent> <Leader>aH <Cmd>Gina log --graph --all<CR>
nnoremap <silent> <Leader>al <Cmd>Gina log<CR>
nnoremap <silent> <Leader>aL <Cmd>Gina log :%<CR>
nnoremap <silent> <Leader>af <Cmd>Gina ls<CR>
nnoremap <silent> <Leader>ars <Cmd>Gina show <C-r><C-w><CR>
nnoremap <silent> <Leader>arc <Cmd>Gina changes <C-r><C-w><CR>
nnoremap <silent> <Leader>ao <Cmd>Gina browse --extract :<CR>
xnoremap <silent> <Leader>ao <Cmd>Gina browse --extract :<CR>
nnoremap <silent> <leader>aw <Cmd>Gina browse --scheme=pr<CR>
'''
hook_post_source = '''
call extend(g:gina#command#browse#translation_patterns['github\.com'][1],
              \ {'pr':'https://\1/\2/\3/pull/new/%c0'}
              \)
call gina#custom#command#option(
      \ 'commit', '-v|--verbose'
      \)
call gina#custom#command#option(
      \ '/\%(status\|commit\)',
      \ '-u|--untracked-files'
      \)
call gina#custom#command#option(
      \ 'status',
      \ '-b|--branch'
      \)
call gina#custom#command#option(
      \ 'status',
      \ '-s|--short'
      \)
call gina#custom#command#option(
      \ '/\%(commit\|tag\)',
      \ '--restore'
      \)
call gina#custom#mapping#nmap(
      \ 'status', '<C-^>',
      \ ':<C-u>Gina commit<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#mapping#nmap(
      \ 'commit', '<C-^>',
      \ ':<C-u>Gina status<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#mapping#nmap(
      \ 'status', '<C-6>',
      \ ':<C-u>Gina commit<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#mapping#nmap(
      \ 'commit', '<C-6>',
      \ ':<C-u>Gina status<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'preview',
      \ 'topleft show:commit:preview',
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'p',
      \ ':<C-u>call gina#action#call(''preview'')<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)

call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'changes',
      \ 'topleft changes:of:preview',
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'c',
      \ ':<C-u>call gina#action#call(''changes'')<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)

call gina#custom#execute(
      \ '/\%(ls\|log\|reflog\|grep\)',
      \ 'setlocal noautoread',
      \)
call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|log\|reflog\|grep\)',
      \ 'setlocal cursorline',
      \)

call gina#custom#command#option(
      \ '/\%(branch\|changes\|grep\|log\|show\)',
      \ '--opener', 'vsplit'
      \)
call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|grep\|changes\|tag\)',
      \ 'setlocal winfixheight',
      \)

call gina#custom#mapping#nmap(
      \ 'branch',
      \ 'dd',
      \ '<Plug>(gina-branch-delete)',
      \ {'mode': 'n', 'silent': 1}
      \)
call gina#custom#mapping#nmap(
      \ 'branch',
      \ 'n',
      \ '<Plug>(gina-branch-new)',
      \ {'nmap': 1, 'silent': 1}
      \)

if dein#tap('ddc.vim')
  call ddc#custom#patch_filetype('gina-commit', 'specialBufferCompletion', v:true)
  call ddc#custom#patch_filetype('gin-commit', 'specialBufferCompletion', v:true)
endif
'''

[[plugins]]
repo =  'tpope/vim-dispatch'
on_event = 'CursorHold'
hook_add = '''
let g:dispatch_no_tmux_make = 1
'''


[[plugins]]
repo = 'vim-test/vim-test'
on_cmd = [
   'Test'
]
hook_add = '''
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>
let test#go#gotest#options = {
  \ 'nearest': '-v -count=1',
  \ 'file':    '-v -count=1',
  \ 'suite':   '-v -count=1',
\}

let test#strategy = 'dispatch'
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = 'denops.vim'
on_cmd = 'FuzzyMotion'
hook_add = '''
nnoremap <Leader>s <Cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = { vonx = ['<Plug>(operator-sandwich-','<Plug>(sandwich-'] }
hook_add = '''
" add
let g:sandwich_no_default_key_mappings = 1
nmap sa <Plug>(sandwich-add)
xmap sa <Plug>(sandwich-add)
omap sa <Plug>(sandwich-add)

" delete
nmap sd <Plug>(sandwich-delete)
xmap sd <Plug>(sandwich-delete)
nmap sdb <Plug>(sandwich-delete-auto)

" replace
nmap sr <Plug>(sandwich-replace)
xmap sr <Plug>(sandwich-replace)
nmap srb <Plug>(sandwich-replace-auto)

omap ib <Plug>(textobj-sandwich-auto-i)
xmap ib <Plug>(textobj-sandwich-auto-i)
omap ab <Plug>(textobj-sandwich-auto-a)
xmap ab <Plug>(textobj-sandwich-auto-a)

omap is <Plug>(textobj-sandwich-query-i)
xmap is <Plug>(textobj-sandwich-query-i)
omap as <Plug>(textobj-sandwich-query-a)
xmap as <Plug>(textobj-sandwich-query-a)
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = { nx = '<Plug>(EasyAlign)' }
hook_add = '''
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo ='kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = { n = '<Plug>(operator-replace)' }
hook_add = '''
nmap <leader>r <Plug>(operator-replace)
'''


[[plugins]]
repo ='thinca/vim-qfreplace'
on_ft = ['qf']
[plugins.ftplugin]
qf = '''
  nnoremap <buffer> r <Cmd>Qfreplace<CR>
'''

[[plugins]]
repo ='tpope/vim-repeat'
on_map = ['.']

[[plugins]]
repo ='yssl/QFEnter'
on_ft = ['qf']

[[plugins]]
repo = 'kana/vim-altr'
on_ft = ['go']
on_event = 'CursorHold'
hook_source = '''
function! s:makegotest() abort
  let src=expand("%:p:r")
  let filex=expand("%:p:e")
  if filex != "go"
      return
  endif
  if expand("%:p:r") !~ "test$"
      let src.="_test"
  endif
  let src.=".go"
  let chk=getftype(src)
  if chk == "file"
      return
  endif
  call writefile(["package"],src)
endfunction

nnoremap <SID>(makegotest) <Cmd>call <SID>makegotest()<CR>
nmap <leader>t <SID>(makegotest)<Plug>(altr-forward)
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = ['BufReadPre', 'BufNewFile']
on_lua = 'gitsigns'
hook_source = '''
lua << EOF
 require('gitsigns').setup {
 signs = {
   add          = {hl = 'GitSignsAdd'   , text = '+', numhl='GitSignsAddNr'   , linehl='GitSignsAddLn'},
   change       = {hl = 'GitSignsChange', text = '│', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
   delete       = {hl = 'GitSignsDelete', text = '_', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
   topdelete    = {hl = 'GitSignsDelete', text = '‾', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
   changedelete = {hl = 'GitSignsChange', text = '~', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
 },
 signcolumn = true,
 numhl      = false,
 linehl     = false,
 word_diff  = false,
 watch_gitdir = {
   interval = 1000,
   follow_files = true
 },
 attach_to_untracked = true,
 current_line_blame = false,
 current_line_blame_opts = {
   virt_text = true,
   virt_text_pos = 'eol',
   delay = 1000,
   ignore_whitespace = false,
 },
 current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
 sign_priority = 6,
 update_debounce = 100,
 status_formatter = nil,
 max_file_length = 40000,
 preview_config = {
   border = 'single',
   style = 'minimal',
   relative = 'cursor',
   row = 0,
   col = 1
 },
 yadm = {
   enable = false
  },
  on_attach = function(bufnr)
    local gs = package.loaded.gitsigns
    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end
    map('n', ']c', "&diff ? ']c' : '<cmd>Gitsigns next_hunk<CR>'", {expr=true})
    map('n', '[c', "&diff ? '[c' : '<cmd>Gitsigns prev_hunk<CR>'", {expr=true})
    map({'n', 'v'}, '<leader>hs', ':Gitsigns stage_hunk<CR>')
    map({'n', 'v'}, '<leader>hr', ':Gitsigns reset_hunk<CR>')
    map('n', '<leader>hS', gs.stage_buffer)
    map('n', '<leader>hu', gs.undo_stage_hunk)
    map('n', '<leader>hR', gs.reset_buffer)
    map('n', '<leader>hp', gs.preview_hunk)
    map('n', '<leader>hb', function() gs.blame_line{full=true} end)
    map('n', '<leader>tb', gs.toggle_current_line_blame)
    map('n', '<leader>hd', gs.diffthis)
    map('n', '<leader>hD', function() gs.diffthis('~') end)
    map('n', '<leader>td', gs.toggle_deleted)
    map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
  end
  }
EOF
'''

[[plugins]]
repo = 'hrsh7th/vim-eft'
on_map = { nxo = '<Plug>(eft-' }
hook_source = '''
let g:eft_ignorecase = v:true
'''
hook_add = '''
nmap f <Plug>(eft-f-repeatable)
xmap f <Plug>(eft-f-repeatable)
omap f <Plug>(eft-f-repeatable)
nmap F <Plug>(eft-F-repeatable)
xmap F <Plug>(eft-F-repeatable)
omap F <Plug>(eft-F-repeatable)

nmap t <Plug>(eft-t-repeatable)
xmap t <Plug>(eft-t-repeatable)
omap t <Plug>(eft-t-repeatable)
nmap T <Plug>(eft-T-repeatable)
xmap T <Plug>(eft-T-repeatable)
omap T <Plug>(eft-T-repeatable)
'''


[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'InsertEnter'
hook_source = '''
  let g:echodoc#type = has('nvim') ? 'floating' : 'popup'
  let g:echodoc#events = ['PumCompleteDone', 'TextChangedP', 'PumCompleteChanged']
'''
hook_post_source = '''
  call echodoc#enable()
'''

[[plugins]]
repo = 'tversteeg/registers.nvim'
depends = 'denops.vim'
if = 'has("nvim")'
on_map = '"'
hook_source = '''
let g:registers_paste_in_normal_mode = 1
let g:registers_hide_only_whitespace = 1
let g:registers_show_empty_registers = 0
'''

[[plugins]]
repo = 'junegunn/fzf'
hook_post_update = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_map  = [
'<Leader>f',
'<Leader>gf',
'<Leader>gF',
'<Leader>b ',
'<Leader>l ',
'<Leader>h ',
'<Leader>m ',
'<Leader>R ',
]
on_cmd = [
    'Files',
    'GFiles',
    'Buffers',
    'BLines',
    'History',
    'Mark',
    'Rg',
    'HelpRg',
]
hook_source= '''
let $FZF_DEFAULT_OPTS="--layout=reverse"
let $FZF_DEFAULT_COMMAND="rg --line-number --no-heading --files --hidden --glob '!.git/**'"

let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'border': 'sharp' } }
nnoremap <silent> <Leader>f :Files<CR>
nnoremap <silent> <Leader>gf :GFiles<CR>
nnoremap <silent> <Leader>gF :GFiles?<CR>
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>l :BLines<CR>
nnoremap <silent> <Leader>h :History<CR>
nnoremap <silent> <Leader>m :Mark<CR>
nnoremap <silent> <Leader>R :Rg<CR>
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
autocmd FileType fzf tnoremap <silent> <buffer> <Esc> <C-g>

let g:fzf_action = {
                \'ctrl-t':'tab split',
                \'ctrl-s':'split',
                \'ctrl-e':'edit',
                \'enter':'vsplit'
                \}


let &grepprg = 'rg --json $* \| jq -r ''select(.type=="match")\|.data as $data\|$data.submatches[]\|"\($data.path.text):\($data.line_number):\(.start+1):\(.end+1):\($data.lines.text//""\|sub("\n$";""))"'

command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}, 'right:50%:wrap'))

inoremap <expr> <c-f><c-i> fzf#vim#complete('gopkgs -format "{{.ImportPath}}"')

let g:helppaths = uniq(sort(split(globpath(&runtimepath, 'doc/**', 1), '\n')))
command! -bang -nargs=* HelpRg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading -g "*" "" '. join(g:helppaths).shellescape(<q-args>), 1,
      \   fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}, 'right:90%'), <bang>0)

'''
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
on_source = ['lualine.nvim']

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
on_event = 'BufRead'
hook_source = 'lua require("biosugar0.plugins.lualine")'

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
on_cmd  = [
    'TmuxNavigateLeft',
    'TmuxNavigateDown',
    'TmuxNavigateUp',
    'TmuxNavigateRight',
    'TmuxNavigatePrevious',
]
hook_add = '''
" <C-w> 系を Vim Tmux Navigator に移譲する
nnoremap <silent> <C-w>h :TmuxNavigateLeft<cr>
nnoremap <silent> <C-w>j :TmuxNavigateDown<cr>
nnoremap <silent> <C-w>k :TmuxNavigateUp<cr>
nnoremap <silent> <C-w>l :TmuxNavigateRight<cr>
nnoremap <silent> <C-w>\\ :TmuxNavigatePrevious<cr>
'''

[[plugins]]
repo = 'skanehira/translate.vim'
on_map = { xn = ['<Plug>(Translate)','<Plug>(VTranslate)']}
hook_add = '''
let g:translate_source = "en"
let g:translate_target = "ja"
let g:translate_winsize = 10
nmap tr <Plug>(Translate)
vmap tr <Plug>(VTranslate)
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
on_map = {nox = '<Plug>'}

[[plugins]]
repo ='kana/vim-operator-user'
on_map = {nox = '<Plug>'}

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = ['<Plug>(asterisk-']
on_source = ['nvim-hlslens']
hook_add = '''
map *  <Plug>(asterisk-z*)
map #  <Plug>(asterisk-z#)
map g* <Plug>(asterisk-gz*)
map g# <Plug>(asterisk-gz#)
'''

[[plugins]]
repo = 'machakann/vim-textobj-delimited'
depends = 'vim-textobj-user'
on_map = ['vid', 'viD', 'vad', 'vaD']

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'
on_map = {xo = '<Plug>(textobj-parameter'}

[[plugins]]
repo ='mattn/vim-findroot'
on_event = 'BufRead'
hook_source = '''
let g:findroot_not_for_subdir = 0
'''

[[plugins]]
repo ='t9md/vim-textmanip'
on_map = '<Plug>(textmanip-'
hook_add = '''
xmap <Space>d <Plug>(textmanip-duplicate-down)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>D <Plug>(textmanip-duplicate-up)
nmap <Space>D <Plug>(textmanip-duplicate-up)

xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = [
 'Linediff',
]
hook_source = '''
let g:linediff_first_buffer_command  = 'leftabove new'
let g:linediff_second_buffer_command = 'rightbelow vertical new'
augroup LineDiff
  au!
  autocmd User LinediffBufferReady nnoremap <buffer> <silent> q :<C-u>LinediffReset<CR>
augroup END
'''
