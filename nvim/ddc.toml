[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim','vim-vsnip','vim-vsnip-integ','skkeleton','lexima.vim']
on_event = ['InsertEnter','CursorHold']
on_map = [':','/','?']
hook_post_source = "lua require('biosugar0.plugins.ddc')"

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_source = 'ddc.vim'
hook_source = '''
let g:context_filetype#ignore_patterns = {
    \ 'toml': ['^\s*#\s*'],
    \ }
'''

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-zsh'
on_source = 'ddc.vim'
depends = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_truncate_abbr'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-omni'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-dictionary'
on_source = 'ddc.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'vim-vsnip-integ'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'
depends = ['vim-vsnip']

[[plugins]]
repo = 'vim-skk/skkeleton'
on_cmd= '<Plug>(skkeleton-'
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
let g:skk_dir = expand('~/.local/share/skk')
let g:globalJisyo = g:skk_dir .. '/SKK-JISYO.L'
if !filereadable(g:globalJisyo)
  echomsg 'Installing skk global jisyo ...'
  let s:gzipfile = g:globalJisyo .. '.gz'
  call system('curl -fLo ' .. s:gzipfile .. ' --create-dirs '
        \ .. 'https://skk-dev.github.io/dict/SKK-JISYO.L.gz')
  call system('gzip -d ' .. s:gzipfile)
endif
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_source = 'ddc.vim'
hook_add = '''
let g:lexima_ctrlh_as_backspace = 1
let g:lexima_no_default_rules = v:true
'''
hook_source = '''
call lexima#set_default_rules()
'''
